/* Copyright (c) 2014, 2015 Qualcomm Technologies Inc

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted (subject to the limitations in the disclaimer below) provided that
the following conditions are met:

Redistributions of source code must retain the above copyright notice, this list
of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright notice, this
list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

Neither the name of Qualcomm Technologies Inc nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
package org.firstinspires.ftc.teamcode;

import com.kauailabs.navx.ftc.AHRS;
import com.kauailabs.navx.ftc.navXPIDController;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DeviceInterfaceModule;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.hardware.DigitalChannelController;
import com.qualcomm.robotcore.hardware.LightSensor;
import com.qualcomm.robotcore.hardware.OpticalDistanceSensor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

import java.text.DecimalFormat;

/*
 * An example loop op mode where the robot will rotate
 * to a specified angle an then stop.
 *
 * This example uses a simple PID controller configuration
 * with a P coefficient, and will likely need tuning in order
 * to achieve optimal performance.
 *
 * Note that for the best accuracy, a reasonably high update rate
 * for the navX-Model sensor should be used.
 */

// This is the original Chris teleop mode, but missing the ball spin
//    on the collector.  Similar to ChrisModified0402

@TeleOp(name="Chris0754", group="Navx")
//@Disabled
public class Chris1231 extends OpMode {
    DcMotor back_left, back_right, front_left, front_right;
    float turn_x, turn_y, turn_z;
    double navx_angle;

    DeviceInterfaceModule dim;   //
    OpticalDistanceSensor ODS;   // CATAPULT LIGHT SENSER

    boolean navx_enabled;

    int movement_direction = 0; //FRONT is front by default

    /* This is the port on the Core Device Interface Module        */
    /* in which the navX-Model Device is connected.  Modify this  */
    /* depending upon which I2C port you are using.               */
    private final int NAVX_DIM_I2C_PORT = 0;
    private AHRS navx_device;
    private navXPIDController yawPIDController;
    private ElapsedTime runtime = new ElapsedTime();

    private final byte NAVX_DEVICE_UPDATE_RATE_HZ = 50;

    private final double TARGET_ANGLE_DEGREES = 0.0;
    private final double TOLERANCE_DEGREES = 2.0;
    private final double MIN_MOTOR_OUTPUT_VALUE = -1.0;
    private final double MAX_MOTOR_OUTPUT_VALUE = 1.0;
    private final double YAW_PID_P = 0.005;
    private final double YAW_PID_I = 0.0;
    private final double YAW_PID_D = 0.0;

    // Servo test for "485 servo"
    double ServoPosition1;
    //Ramp Servo
    double ServoPosition2;
    boolean bool_gamepad1yPressed;
    boolean bool_gamepad1bPressed;

    //Catapult Servo
    Servo CatServo;
    //Ramp Servo- this controls the ball to transition into the catapult cup
    Servo RampServo;

    //Collector
    DcMotor BallCollector;
    boolean bool_gamepad1xPressed;
    boolean bool_gamepad1aPressed;
    boolean FinishedShooting = false;
    int BallCollectorServoPosition;
    Servo SpinServo;
    double SpinServoPos;

    //button pushing servo (not used yet, just init to correct position)
    Servo servo;
    double servoButtonPos;
    float leftstickx;
    private boolean calibration_complete = false;

    navXPIDController.PIDResult yawPIDResult;
    DecimalFormat df;

    DigitalChannel switch_custom_test;
    boolean boolean_switch;

    // Declare variables for the switch
    int     dim_status_byte;   // 8 bits to indicate whether input or output mode
    boolean dim_value_bit;;    // single bit for D7

    // floor light sensor
    OpticalDistanceSensor lineSensor;

    //CELEBRATE!!!!
    boolean celebSpin = false;

    //LEGO light sensors
    LightSensor lightSensorL, lightSensorR;

    double initValL;
    double initValR;

    @Override
    public void init() {
        //motors
        front_left = hardwareMap.dcMotor.get("front_left");
        front_right = hardwareMap.dcMotor.get("front_right");

        back_left = hardwareMap.dcMotor.get("back_left");
        back_right = hardwareMap.dcMotor.get("back_right");

        front_right.setDirection(DcMotor.Direction.REVERSE);
        back_right.setDirection(DcMotor.Direction.REVERSE);

        front_left.setMaxSpeed(2800); // max speed = 150 rpm this is for the andymark40 motors
        front_right.setMaxSpeed(2800); // max speed = 150 rpm this is for the andymark40 motors
        back_left.setMaxSpeed(2800); // max speed = 150 rpm this is for the andymark40 motors
        back_right.setMaxSpeed(2800); // max speed = 150 rpm this is for the andymark40 motors

        front_left.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE); //can be.FLOAT if required
        front_right.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        back_left.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        back_right.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        //encoders
        front_left.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        front_right.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        back_left.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        back_right.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        front_left.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        front_right.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        back_left.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        back_right.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        dim = hardwareMap.deviceInterfaceModule.get("dim");

        ///////////////////////Related to the catapult system/////////////////
        CatServo = hardwareMap.servo.get("CatServo");
        //This is for catapult
        ServoPosition1 = 0.5;
        CatServo.setPosition(ServoPosition1);
        bool_gamepad1bPressed = false;

        RampServo = hardwareMap.servo.get("RampServo");
        ServoPosition2 = 0;
        RampServo.setPosition(ServoPosition2);
        bool_gamepad1yPressed = false;

        ODS = hardwareMap.opticalDistanceSensor.get("CatODSensor");

        //////////BALL COLLECTOR////////////////
        BallCollector = hardwareMap.dcMotor.get("ball_collector");

        BallCollector.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        BallCollector.setPower(0);

        BallCollector.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        SpinServo = hardwareMap.servo.get("SpinServo");
        SpinServoPos = 0.5; //stopped
        SpinServo.setPosition(SpinServoPos);

        //set button pushing servo to default position
        servo = hardwareMap.servo.get("servo");
        double position = 0.45;
        servo.setPosition(position);

        //navx
        navx_device = AHRS.getInstance(hardwareMap.deviceInterfaceModule.get("dim"),
                NAVX_DIM_I2C_PORT,
                AHRS.DeviceDataType.kProcessedData,
                NAVX_DEVICE_UPDATE_RATE_HZ);

        /* Create a PID Controller which uses the Yaw Angle as input. */
        yawPIDController = new navXPIDController( navx_device,
                navXPIDController.navXTimestampedDataSource.YAW);

        /* Configure the PID controller */
        yawPIDController.setSetpoint(TARGET_ANGLE_DEGREES);
        yawPIDController.setContinuous(true);
        yawPIDController.setOutputRange(MIN_MOTOR_OUTPUT_VALUE, MAX_MOTOR_OUTPUT_VALUE);
        yawPIDController.setTolerance(navXPIDController.ToleranceType.ABSOLUTE, TOLERANCE_DEGREES);
        yawPIDController.setPID(YAW_PID_P, YAW_PID_I, YAW_PID_D);
        yawPIDController.enable(true);

        df = new DecimalFormat("#.##");

        dim_status_byte = dim.getDigitalIOControlByte();
        dim_value_bit  = dim.getDigitalChannelState(7);

        //light sensor
        lineSensor = hardwareMap.opticalDistanceSensor.get("line");
        lightSensorL = hardwareMap.lightSensor.get("lightL");
        lightSensorR = hardwareMap.lightSensor.get("lightR");

    }

    @Override
    public void start() {
        navx_device.zeroYaw();
        yawPIDResult = new navXPIDController.PIDResult();
    }

    @Override
    public void loop() {
        if(gamepad1.right_stick_x > 0.1 || gamepad1.right_stick_x < -0.1 ) {
            navx_enabled = false;
        }
        if(!navx_enabled && gamepad1.right_stick_x < 0.1 && gamepad1.right_stick_x > -0.1) {
         //   navx_enabled = true;
            navx_enabled = false;
            yawPIDController.setSetpoint(0.0);
            navx_device.zeroYaw(); //THESE IF STATEMENTS MAY BE BUGGY (let me fix it)
        }
        if(gamepad1.left_bumper&&celebSpin==false){
            turn_z = 1;
            celebSpin= true;
        }
        if(gamepad1.left_bumper&&celebSpin==true){
            turn_z = 0;
            celebSpin= false;
        }
        //navx control
        if (gamepad1.back) {
            navx_device.zeroYaw();
        }
        if (gamepad1.left_bumper && false) { //disabled, need to find place
            yawPIDController.setSetpoint(90.0);
            navx_device.zeroYaw();
        }
        if (gamepad1.right_bumper && false) {
            yawPIDController.setSetpoint(-90.0);
            navx_device.zeroYaw();
        }

        //set relative directions
        if (gamepad1.dpad_up) {
            movement_direction = 0; //FRONT is front
        }else if (gamepad1.dpad_left) {
            movement_direction = 1; //LEFT is front
            //servoButtonPos = 0.8;
            servo.setPosition(servoButtonPos);
        }else if (gamepad1.dpad_down) {
            movement_direction = 3; //RIGHT is front, was BACK (2)
        }else if (gamepad1.dpad_right) {
            //movement_direction = 3; //RIGHT is front
            //servoButtonPos = 0.1;
            servo.setPosition(servoButtonPos);
        }
        else if (!gamepad1.dpad_left || !gamepad1.dpad_right)
        {
            servoButtonPos = 0.45;
            servo.setPosition(servoButtonPos);

        }

        //run navx if enabled
        if (navx_enabled) {
            navx_loop(); //check for updates to PID and set 'navx_angle' value
            turn_z = (float) navx_angle;
        }else{
            if(celebSpin == false){
            turn_z = 4*gamepad1.right_stick_x/5; //reduced to 4/5 from 3/3
            turn_z = Range.clip(turn_z, -1, 1);
            turn_z = (float) scaleInput(turn_z);
        }}

        //set controller values based on relative direction
        if (movement_direction == 0) {
            turn_x = 3 * gamepad1.left_stick_x / 3;
            turn_y = 3 * gamepad1.left_stick_y / 3;
        }else if(movement_direction == 1) {
            turn_x = 3 * gamepad1.left_stick_y / 3;
            turn_y = -3 * gamepad1.left_stick_x / 3;
        }else if(movement_direction == 2) {
            turn_x = -3 * gamepad1.left_stick_x / 3;
            turn_y = -3 * gamepad1.left_stick_y / 3;
        }else if(movement_direction == 3) {
            turn_x = -3 * gamepad1.left_stick_y / 3;
            turn_y = 3 * gamepad1.left_stick_x / 3;   // was 2, forgot to put to 3
        }
//        if (movement_direction == 0) {
//            if (Math.abs(gamepad1.left_stick_x)> .2) {
//                turn_x = 3 * gamepad1.left_stick_x / 3;
//            }
//            else{
//                turn_x =0;
//            }
//            turn_y = 3 * gamepad1.left_stick_y / 3;
//        }else if(movement_direction == 1) {
//            if (Math.abs(gamepad1.left_stick_x)> .2) {
//                turn_x = 3 * gamepad1.left_stick_x / 3;
//            }
//            else{
//                turn_x =0;
//            }
//            turn_y = -3 * gamepad1.left_stick_x / 3;
//        }else if(movement_direction == 2) {
//            if (Math.abs(gamepad1.left_stick_x)> .2) {
//                turn_x = -3 * gamepad1.left_stick_x / 3;
//            }
//            else{
//                turn_x =0;
//            }
//            turn_y = -3 * gamepad1.left_stick_y / 3;
//        }else if(movement_direction == 3) {
//            if (Math.abs(gamepad1.left_stick_x)> .2) {
//                turn_x = -3 * gamepad1.left_stick_x / 3;
//            }
//            else{
//                turn_x =0;
//            }
//            turn_y = 3 * gamepad1.left_stick_x / 3;   // was 2, forgot to put to 3
//        }

        //cut down and scale controller values
        turn_x = Range.clip(turn_x, -1, 1);
        turn_y = Range.clip(turn_y, -1, 1);
        turn_x = (float) scaleInput(turn_x);
        turn_y = (float) scaleInput(turn_y);

        //set power
        if (yawPIDResult.isOnTarget() && navx_enabled) {
            front_right.setPower(turn_y + turn_x);
            front_left.setPower(turn_y - turn_x);
            back_right.setPower(turn_y - turn_x);
            back_left.setPower(turn_y + turn_x);
        }else{
            front_right.setPower(turn_y + turn_x + turn_z);
            front_left.setPower(turn_y - turn_x - turn_z);
            back_right.setPower(turn_y - turn_x + turn_z);
            back_left.setPower(turn_y + turn_x - turn_z);
        }

        //run loops to control intake and shooter
        collector_loop();
        catapult_loop();

        dim_status_byte = dim.getDigitalIOControlByte();
        dim_value_bit  = dim.getDigitalChannelState(7);

        initValL = lightSensorL.getRawLightDetected();
        initValR = lightSensorR.getRawLightDetected();

        telemetry.addData("CatServoPosition1 ", ServoPosition1);
        telemetry.addData("RampServoPosition2 ", ServoPosition2);
        telemetry.addData("BallCollectorServoPosition ", BallCollectorServoPosition);
        telemetry.addData("SpinServoPos ", SpinServoPos);
        telemetry.addData("ServoButtonPos ", servoButtonPos);
        telemetry.addData("LIGHT LEFT", String.format("%.2f", initValL));
        telemetry.addData("LIGHT RIGHT", String.format("%.2f", initValR));



        //1.6 is where the light sensor sees the catapult bar.
        telemetry.addData("RawLightDectected ",String.format("%.2f", ODS.getRawLightDetected() ) );

        telemetry.addData("NavX On", navx_enabled);
        telemetry.addData("Yaw", df.format(navx_device.getYaw()));
        telemetry.addData("Motor Output", df.format(navx_angle));
        telemetry.addData("Last Updated", "402");
        telemetry.addData("Control Byte ",String.format("%02x",dim_status_byte ));
        telemetry.addData("Switch ",dim_value_bit);

        //Will not use this function, the values are the same, 0.2 or 0.3
        telemetry.addData("Floor LightValue ", lineSensor.getLightDetected());

    }

    public void collector_loop() {
      //  if( (gamepad1.right_bumper) )
        if( (gamepad1.right_bumper) ) //collector down
        {
            // Reset to known position if not already in known position
            // BallCollectorServoPosition = 0;
            // BallCollector.setTargetPosition(BallCollectorServoPosition);

            // Set the ramp to 0.2 and wait a number of msec before resetting.
            runtime.reset();
            bool_gamepad1xPressed = true;
            BallCollector.setPower(0.2);
            BallCollectorServoPosition = 500;
            BallCollector.setTargetPosition(BallCollectorServoPosition);
        }


    //    if (gamepad1.left_bumper)
        if (gamepad1.right_trigger == 1.0) //collector load ball
        {
            // Reset to known position if not already in known position
            // BallCollectorServoPosition = 0;
            // BallCollector.setTargetPosition(BallCollectorServoPosition);

            // Set the ramp to 0.2 and wait a number of msec before resetting.
            runtime.reset();
            bool_gamepad1aPressed = true;
            BallCollector.setPower(0.2);
            BallCollectorServoPosition = 50; //Set to dump position to dump particle
            BallCollector.setTargetPosition(BallCollectorServoPosition);
        }
        //Move intake to 0 position
        if (gamepad1.x)
        {
            // Reset to known position if not already in known position
            // BallCollectorServoPosition = 0; (Home Position)
            // BallCollector.setTargetPosition(BallCollectorServoPosition);

            // Set the ramp to 0.2 and wait a number of msec before resetting.
            runtime.reset();
            BallCollector.setPower(0.2);
            BallCollectorServoPosition = 0;
            BallCollector.setTargetPosition(BallCollectorServoPosition);
        }

        if((gamepad1.a) && ( SpinServoPos == 0.5) && (runtime.milliseconds() > 500) )
        {
            runtime.reset();
            SpinServoPos = 1.0;
            SpinServo.setPosition(SpinServoPos);
        }
        if((gamepad1.a) && ( SpinServoPos == 1.0) && (runtime.milliseconds() > 500) )
        {
            runtime.reset();
            SpinServoPos = 0.5;
            SpinServo.setPosition(SpinServoPos);
        }

        if(gamepad1.b)
        {
            SpinServoPos = 0.5;
            SpinServo.setPosition(SpinServoPos);
        }
        if( (gamepad1.y)&& ( SpinServoPos == 0.5) && (runtime.milliseconds() > 500) )
        {
            runtime.reset();
            SpinServoPos = 0.0;
            SpinServo.setPosition(SpinServoPos);
        }
        if( (gamepad1.y)&& ( SpinServoPos == 0.0) && (runtime.milliseconds() > 500) )
        {
            runtime.reset();
            SpinServoPos = 0.5;
            SpinServo.setPosition(SpinServoPos);
        }
    }

    void catapult_loop() {
        if(  (gamepad1.left_trigger == 1.0) && (bool_gamepad1yPressed == false)
            && ( ServoPosition1 == 0.5 )
          )
        {
            // Reset to known position if not already in known position
            ServoPosition2 = 0;
            RampServo.setPosition(ServoPosition2);

            // Set the ramp to 0.2 and wait a number of msec before resetting.
            runtime.reset();
            bool_gamepad1yPressed = true;
            ServoPosition2 = 0.3;  // was 0.2
            RampServo.setPosition(ServoPosition2);
        }

        if ((bool_gamepad1yPressed == true) && (runtime.milliseconds() > 500)) {
            bool_gamepad1yPressed = false;
            ServoPosition2 = 0;
            RampServo.setPosition(ServoPosition2);
        }

       // if ((gamepad1.right_trigger == 1.0) && (bool_gamepad1bPressed == false)){
        if ((gamepad1.b && (bool_gamepad1bPressed == false) && ( ServoPosition2 == 0)
            )){
            // Rotate right, this is the desired rotation for the catapult
            // 1 means to rotate right
            ServoPosition1 = 1;
            runtime.reset();
            CatServo.setPosition(ServoPosition1);
            bool_gamepad1bPressed = true;
        }

        //If we see catapult bar then stop the motor.
        // MIGHT NEED TO DEBOUNCED THE LIGHT READING TO AVOID PREMATURE STOPS.
        if (    ( ODS.getRawLightDetected() > 3.0 )
                && ( ODS.getRawLightDetected() > 3.0 )
                && (runtime.milliseconds() > 300)
                && ( bool_gamepad1bPressed == true)) {
            //Stop rotation
            bool_gamepad1bPressed = false;
            ServoPosition1 = 0.5;     // motor rotation
            CatServo.setPosition(ServoPosition1);
            FinishedShooting = true;
            runtime.reset();
        }

            if (FinishedShooting == true){
                if (runtime.milliseconds() > 100) {
                    ServoPosition2 = .3;      // ramp servo
                    RampServo.setPosition(ServoPosition2);
                }
                if (runtime.milliseconds() > 600) {
                    ServoPosition2 = 0;
                    RampServo.setPosition(ServoPosition2);
                    FinishedShooting = false;
                }
            }

    }

    void navx_loop() {
        if ( !calibration_complete ) {
            //<15s calibration process
            calibration_complete = !navx_device.isCalibrating();
            if ( calibration_complete ) {
                navx_device.zeroYaw();
            } else {
                telemetry.addData("navX", "Startup Calibration in Progress");
            }
        } else {
            //updating motors
            if (yawPIDController.isNewUpdateAvailable(yawPIDResult)) {
                if (yawPIDResult.isOnTarget()) {
                    //front_right.setPowerFloat();
                    //front_left.setPowerFloat();
                    //back_right.setPowerFloat();
                    //back_left.setPowerFloat();
                    //telemetry.addData("Motor Output", df.format(0.00));
                } else {
                    navx_angle = yawPIDResult.getOutput();
                    if (navx_angle < 0.08 && navx_angle > 0) { //motors won't spin unless greater than 0.08
                        navx_angle = 0.08;
                    }
                    if (navx_angle > -0.08 && navx_angle < 0) {
                        navx_angle = -0.08;
                    }
                }
            } else {
                //no need to update motors
            }
        }
    }

    double scaleInput(double dVal)  {
        double[] scaleArray = { 0.0, 0.0, 0.0, 0.05, 0.09, 0.10, 0.12, 0.15, 0.18, 0.24,
                0.30, 0.36, 0.43, 0.50, 0.60, 0.72, 0.85, 1.00, 1.00 };

        // get the corresponding index for the scaleInput array.
        int index = (int) (dVal * 18.0);

        // index should be positive.
        if (index < 0) {
            index = -index;
        }

        // index cannot exceed size of array minus 1.
        if (index > 18) {
            index = 18;
        }

        // get value from the array.
        double dScale = 0.0;
        if (dVal < 0) {
            dScale = -scaleArray[index];
        } else {
            dScale = scaleArray[index];
        }

        // return scaled value.
        return dScale;
    }

    @Override
    public void stop() {
        navx_device.close();
    }
}
